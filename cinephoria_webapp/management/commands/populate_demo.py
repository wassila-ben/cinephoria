from django.core.management.base import BaseCommand
from cinephoria_webapp.models import Cinema, Salle, Siege, Genre, Film, Qualite, Seance
from django.utils import timezone
from datetime import datetime, timedelta, time
import random

class Command(BaseCommand):
    help = "Peuple la base de donn√©es avec des donn√©es de d√©monstration"

    def handle(self, *args, **kwargs):
        villes_fr = ["Paris", "Nantes", "Toulouse", "Bordeaux", "Lille"]
        villes_be = ["Charleroi", "Li√®ge"]
        films = [
            "Code z√©ro", "C≈ìur √† Contretemps", "Confusion Totale", "Divorce et Ricochets",
            "La For√™t des Murmures", "Le Masque du Revenant", "Le Royaume Cach√©", "Le Voyage des C≈ìurs Vaillants",
            "Les Enfants de l‚ÄôHyperespace", "Les Vacances de Tonton Gaston", "Op√©ration Blackout",
            "Plan√®te Mars", "Startup en D√©lire", "Tatie D√©raille"
        ]
        qualites = ["4K", "3D", "4DX"]
        genres = ["Science-fiction", "Com√©die", "Romance", "Horreur", "Aventure", "Drame", "Animation"]

        # Cr√©ation des qualit√©s
        qualite_objs = []
        for q in qualites:
            obj, _ = Qualite.objects.get_or_create(type_qualite=q, defaults={"prix_seance": random.uniform(8, 16)})
            qualite_objs.append(obj)

        # Cr√©ation des genres
        genre_objs = []
        for g in genres:
            obj, _ = Genre.objects.get_or_create(genre=g)
            genre_objs.append(obj)

        # Cr√©ation des cin√©mas
        for ville in villes_fr + villes_be:
            pays = "France" if ville in villes_fr else "Belgique"
            cinema, _ = Cinema.objects.get_or_create(
                nom=f"Cin√©phoria {ville}",
                ville=ville,
                pays=pays,
                adresse="1 place centrale",
                cp="75000",
                telephone="01 23 45 67 89"
            )
            self.stdout.write(self.style.SUCCESS(f"üé¨ Cin√©ma cr√©√© : {cinema.nom}"))

            # Salles
            for i in range(1, 11):
                qualite = random.choice(qualite_objs)
                salle = Salle.objects.create(
                    numero_salle=str(i),
                    total_places=165,
                    places_pmr=random.randint(10, 15),
                    qualite=qualite,
                    Cinema=cinema
                )
                # Si√®ges
                for num in range(1, 151):
                    salle.sieges.create(numero_siege=num, rangee=chr(65 + (num // 15)), place_pmr=False)
                for num in range(151, 151 + salle.places_pmr):
                    salle.sieges.create(numero_siege=num, rangee='PMR', place_pmr=True)

        # Films
        for titre in films:
            genre = random.choice(genre_objs)
            Film.objects.get_or_create(
                titre=titre,
                genre=genre,
                note=random.uniform(1.0, 5.0),
                age_minimum=random.choice([0, 7, 12, 16]),
                synopsis="Synopsis automatique g√©n√©r√© pour la d√©mo.",
                date_sortie=timezone.now().date(),
                affiche="films/default.jpg",  
            )
        self.stdout.write(self.style.SUCCESS("Films et genres ajout√©s !"))

        self.stdout.write(self.style.SUCCESS("Base de donn√©es de d√©monstration pr√™te !"))


def create_seances():
    print("\n Cr√©ation des s√©ances...")
    horaires_possibles = [
        time(10, 0), time(13, 0), time(15, 30),
        time(18, 0), time(20, 30), time(22, 0)
    ]

    for cinema in Cinema.objects.all():
        salles = cinema.salles.all()
        films_cinema = Film.objects.filter(seance__salle__cinema=cinema).distinct()

        if not films_cinema:
            # Si aucun film n'est associ√© √† ce cin√©ma, on prend quelques films au hasard
            films_cinema = Film.objects.order_by('?')[:5]

        for salle in salles:
            nb_seances = random.randint(2, 3)
            horaires = random.sample(horaires_possibles, nb_seances)

            for h in horaires:
                film = random.choice(films_cinema)
                duree = timedelta(minutes=random.randint(90, 150))
                heure_fin = (datetime.combine(datetime.today(), h) + duree).time()

                Seance.objects.create(
                    film=film,
                    salle=salle,
                    heure_debut=h,
                    heure_fin=heure_fin
                )

    print("S√©ances cr√©√©es avec succ√®s.")